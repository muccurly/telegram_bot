import json
from telegram import Update, LabeledPrice, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, PreCheckoutQueryHandler, MessageHandler, filters, ContextTypes
from flask import Flask, request

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = '7446262616:AAEUrocdS7wrmw4HYXoTaDyBr4DZ4-_ZuhM'
PROVIDER_TOKEN = '5740929568:TEST:638563210960780616'

# –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
TITLE = "–ê–≤—Ç–æ—Ä—Å–∫–∏–π –∫—É—Ä—Å –æ—Ç Huga"
DESCRIPTION = "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò"
PAYLOAD = "1"
CURRENCY = "KZT"
PRICE = 37800 * 100  # –°—É–º–º–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –∫–æ–ø–µ–π–∫–∞—Ö: 37800 —Ç–≥

PRICES = [LabeledPrice("–¢–µ–Ω–≥–µ", PRICE)]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üåü –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –ú–µ–Ω—è –∑–æ–≤—É—Ç –•—É–≥–∞, (https://www.instagram.com/hugastyle) –∏ —è –ø—Ä–æ—à–µ–ª –ø—É—Ç—å –æ—Ç –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–µ—Ä–∞ –æ–¥–µ–∂–¥—ã –∫ –ø–æ–≥—Ä—É–∂–µ–Ω–∏—é –≤ –º–∏—Ä –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞. –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ –º–µ—Å—è—Ü–∞ –º–æ–π –ò–Ω—Å—Ç–∞–≥—Ä–∞–º –ø—Ä–∏–≤–ª–µ–∫ –±–æ–ª–µ–µ 100,000 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Å–æ –≤—Å–µ–≥–æ –º–∏—Ä–∞ –±–ª–∞–≥–æ–¥–∞—Ä—è –º–æ–µ–º—É –Ω–æ–≤–æ–º—É –ø–æ–¥—Ö–æ–¥—É –∫ –¥–∏–∑–∞–π–Ω—É, —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –ò–ò.\n\n"
        "üöÄ –°–µ–π—á–∞—Å –º–æ—è –∂–∏–∑–Ω—å –∏ –º–æ–µ –≤–∏–¥–µ–Ω–∏–µ –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –∏ —è –≥–æ—Ç–æ–≤ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —ç—Ç–∏–º —Å –≤–∞–º–∏! –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é –≤–∞–º –º–æ–π –∞–≤—Ç–æ—Ä—Å–∫–∏–π –∫—É—Ä—Å –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –¥–∏–∑–∞–π–Ω–∞ –∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞."
    )
    await update.message.reply_text(
        "üéì –í —ç—Ç–æ–º –∫—É—Ä—Å–µ –≤—ã –æ—Å–≤–æ–∏—Ç–µ:\n\n"
        "–í—Å–µ, —á—Ç–æ —è —É–∑–Ω–∞–ª –∑–∞ —Å–≤–æ–∏ 8 –ª–µ—Ç —Ä–∞–±–æ—Ç—ã –≤ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏ –º–æ–¥—ã –∏ 2 –≥–æ–¥–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ –ò–ò.\n"
        "–®–∞–≥ –∑–∞ —à–∞–≥–æ–º –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∏–∑–∞–π–Ω–æ–≤ –Ω–∞ –º–æ–µ–º —É—Ä–æ–≤–Ω–µ.\n"
        "üí° –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –≤–æ–ª–Ω–µ –±—É–¥—É—â–µ–≥–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –∏–∑–º–µ–Ω–∏—Ç–µ —Å–≤–æ—é –∂–∏–∑–Ω—å –∏ –∫–∞—Ä—å–µ—Ä—É!\n\n"
        "üí• –¶–µ–Ω–∞ –∫—É—Ä—Å–∞: $79 / 6980‚ÇΩ / 37,800—Ç–≥\n\n"
        "üì© –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∫—É—Ä—Å–∞.\n\n"
        "üéØ –í–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ —Å—Ç–∞–Ω—å—Ç–µ –ª–∏–¥–µ—Ä–æ–º –≤ –Ω–æ–≤–æ–π —ç–ø–æ—Ö–µ –¥–∏–∑–∞–π–Ω–∞ —Å –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º!\n\n"
        "https://drive.google.com/drive/folders/1-FgiuyA8N3V3RV9xYuaiBMgCQt9IbLie\n"
        "–î–æ–≥–æ–≤–æ—Ä –æ—Ñ–µ—Ä—Ç—ã –∏ –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay")]
        ])
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∏—Ç—å"
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    chat_id = query.message.chat.id

    invoice = {
        "chat_id": chat_id,
        "title": TITLE,
        "description": DESCRIPTION,
        "payload": PAYLOAD,
        "provider_token": PROVIDER_TOKEN,
        "currency": CURRENCY,
        "prices": PRICES,
        "provider_data": json.dumps({
            "InvoiceId": 100,
            "Receipt": {
                "sno": "osn",
                "items": [
                    {
                        "name": TITLE,
                        "quantity": 1,
                        "sum": PRICE,
                        "tax": "vat10",
                        "payment_method": "full_payment",
                        "payment_object": "commodity"
                    }
                ]
            }
        })
    }

    await context.bot.send_invoice(**invoice)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ pre_checkout_query
async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query

    if query.invoice_payload != PAYLOAD:
        await query.answer(ok=False, error_message="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")
    else:
        await query.answer(ok=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ successful_payment
async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    successful_payment = update.message.successful_payment
    await update.message.reply_text("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ú–æ–∂–µ—à—å –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É: https://t.me/+B_me4k9U1WdmNjEy")

application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

application.add_handler(CommandHandler("start", start))
application.add_handler(CallbackQueryHandler(button_callback, pattern="pay"))
application.add_handler(PreCheckoutQueryHandler(precheckout_callback))
application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_callback))

app = Flask(__name__)

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        update = Update.de_json(request.get_json(force=True), application.bot)
        application.process_update(update)
        return 'ok'
    except Exception as e:
        print(f"Error: {e}")
        return 'error', 500

if __name__ == '__main__':
    app.run()
